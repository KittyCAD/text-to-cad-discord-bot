{
  "components": {
    "responses": {
      "Error": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Error"
      }
    },
    "schemas": {
      "EasyPostTrackingUpdateEvent": {
        "description": "An EasyPost tracking update event. FROM: https://www.easypost.com/docs/api#events",
        "properties": {
          "completed_urls": {
            "description": "Webhook URLs that have already been successfully notified as of the time this webhook was sent.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Result type and event name, see the \"Possible Event Types\" section for more information.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier, begins with \"evt_\".",
            "type": "string"
          },
          "mode": {
            "description": "\"test\" or \"production\"",
            "type": "string"
          },
          "object": {
            "description": "\"Event\".",
            "type": "string"
          },
          "pending_urls": {
            "description": "Webhook URLs that have not yet been successfully notified as of the time this webhook event was sent. The URL receiving the Event will still be listed in pending_urls, as will any other URLs that receive the Event at the same time.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "The current status of the event. Possible values are \"completed\", \"failed\", \"in_queue\", \"retrying\", or \"pending\" (deprecated).",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "Error information from a response.",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ],
        "type": "object"
      },
      "Function": {
        "properties": {
          "completed_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "conclusion": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "logs": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "saga_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "created_at"
        ],
        "type": "object"
      },
      "GitHubApp": {
        "description": "A GitHub app.",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "GitHubCheckRun": {
        "description": "A GitHub check run. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/checks#get-a-check-run",
        "properties": {
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubApp"
              }
            ],
            "default": {
              "id": 0
            }
          },
          "check_suite": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCheckSuite"
              }
            ],
            "default": {
              "app": {
                "id": 0
              },
              "id": 0
            }
          },
          "conclusion": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubCheckSuite": {
        "description": "A GitHub check suite. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/checks#suites",
        "properties": {
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubApp"
              }
            ],
            "default": {
              "id": 0
            }
          },
          "conclusion": {
            "type": "string"
          },
          "head_branch": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubComment": {
        "description": "A octorust::Client comment. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#comments",
        "properties": {
          "body": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            }
          }
        },
        "type": "object"
      },
      "GitHubCommit": {
        "description": "A GitHub commit. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#push",
        "properties": {
          "added": {
            "description": "An array of files added in the commit.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "author": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            },
            "description": "The git author of the commit."
          },
          "commit_ref": {
            "type": "string"
          },
          "distinct": {
            "default": false,
            "description": "Whether this commit is distinct from any that have been pushed before.",
            "type": "boolean"
          },
          "id": {
            "description": "The SHA of the commit.",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "description": "The commit message.",
            "type": "string"
          },
          "modified": {
            "description": "An array of files modified by the commit.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "removed": {
            "description": "An array of files removed in the commit.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sha": {
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timestamp of the commit.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "URL that points to the commit API resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubInstallation": {
        "description": "A GitHub app installation.",
        "properties": {
          "access_tokens_url": {
            "type": "string"
          },
          "app_id": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "repositories_url": {
            "type": "string"
          },
          "repository_selection": {
            "type": "string"
          },
          "single_file_name": {
            "type": "string"
          },
          "target_id": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "target_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubIssue": {
        "description": "A octorust::Client issue. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/issues",
        "properties": {
          "assignee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            }
          },
          "assignees": {
            "items": {
              "$ref": "#/components/schemas/GitHubUser"
            },
            "type": "array"
          },
          "body": {
            "type": "string"
          },
          "closed_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "comments": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "labels_url": {
            "type": "string"
          },
          "locked": {
            "default": false,
            "type": "boolean"
          },
          "number": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "pull_request": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubPullRef"
              }
            ],
            "default": {}
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            }
          }
        },
        "required": [
          "events_url",
          "labels_url"
        ],
        "type": "object"
      },
      "GitHubOrganization": {
        "description": "A GitHub organization.",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "id": {
            "format": "uint64",
            "minimum": 0,
            "type": "integer"
          },
          "issues_url": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "public_members_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "avatar_url",
          "events_url",
          "hooks_url",
          "id",
          "issues_url",
          "login",
          "members_url",
          "public_members_url",
          "repos_url",
          "url"
        ],
        "type": "object"
      },
      "GitHubPullRef": {
        "description": "A reference to a pull request.",
        "properties": {
          "diff_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubPullRequest": {
        "description": "A GitHub pull request. FROM: https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls#get-a-pull-request",
        "properties": {
          "base": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCommit"
              }
            ],
            "default": {
              "author": {
                "id": 0,
                "site_admin": false
              },
              "distinct": false,
              "timestamp": null
            }
          },
          "body": {
            "type": "string"
          },
          "closed_at": {
            "default": null,
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "head": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCommit"
              }
            ],
            "default": {
              "author": {
                "id": 0,
                "site_admin": false
              },
              "distinct": false,
              "timestamp": null
            }
          },
          "html_url": {
            "description": "The HTML location of this pull request.",
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "issue_url": {
            "type": "string"
          },
          "merged": {
            "default": false,
            "type": "boolean"
          },
          "merged_at": {
            "default": null,
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "number": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "patch_url": {
            "type": "string"
          },
          "review_comment_url": {
            "type": "string"
          },
          "review_comments_url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            }
          }
        },
        "type": "object"
      },
      "GitHubRateLimit": {
        "description": "A GitHub RateLimit",
        "properties": {
          "limit": {
            "default": 0,
            "format": "uint32",
            "minimum": 0,
            "type": "integer"
          },
          "remaining": {
            "default": 0,
            "format": "uint32",
            "minimum": 0,
            "type": "integer"
          },
          "reset": {
            "default": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubRepo": {
        "description": "A GitHub repository. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#push",
        "properties": {
          "default_branch": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            }
          }
        },
        "type": "object"
      },
      "GitHubUser": {
        "description": "The data type for a GitHub user.",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "default": 0,
            "format": "uint64",
            "minimum": 0,
            "type": "integer"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "site_admin": {
            "default": false,
            "type": "boolean"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubWebhook": {
        "description": "A GitHub webhook event. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads",
        "properties": {
          "action": {
            "description": "Most webhook payloads contain an action property that contains the specific activity that triggered the event.",
            "type": "string"
          },
          "after": {
            "description": "The SHA of the most recent commit on `ref` after the push.",
            "type": "string"
          },
          "before": {
            "description": "The SHA of the most recent commit on `ref` before the push.",
            "type": "string"
          },
          "check_run": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCheckRun"
              }
            ],
            "default": {
              "app": {
                "id": 0
              },
              "check_suite": {
                "app": {
                  "id": 0
                },
                "id": 0
              },
              "id": 0
            },
            "description": "`check_run` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#check_run\n\nThe check run itself."
          },
          "check_suite": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubCheckSuite"
              }
            ],
            "default": {
              "app": {
                "id": 0
              },
              "id": 0
            },
            "description": "`check_suite` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#check_suite\n\nThe check suite itself."
          },
          "comment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubComment"
              }
            ],
            "default": {
              "id": 0,
              "user": {
                "id": 0,
                "site_admin": false
              }
            },
            "description": "`issue_comment` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#issue_comment\n\nThe comment itself."
          },
          "commits": {
            "description": "An array of commit objects describing the pushed commits. The array includes a maximum of 20 commits. If necessary, you can use the Commits API to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.",
            "items": {
              "$ref": "#/components/schemas/GitHubCommit"
            },
            "type": "array"
          },
          "installation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubInstallation"
              }
            ],
            "default": {
              "app_id": 0,
              "id": 0,
              "target_id": 0
            },
            "description": "The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured for and sent to a GitHub App."
          },
          "issue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubIssue"
              }
            ],
            "default": {
              "assignee": {
                "id": 0,
                "site_admin": false
              },
              "comments": 0,
              "events_url": "",
              "id": 0,
              "labels_url": "",
              "locked": false,
              "number": 0,
              "pull_request": {},
              "user": {
                "id": 0,
                "site_admin": false
              }
            },
            "description": "`issues` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#issues\n\nThe issue itself."
          },
          "number": {
            "default": 0,
            "description": "`pull_request` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#pull_request\n\nThe pull request number.",
            "format": "int64",
            "type": "integer"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubOrganization"
              }
            ],
            "default": {
              "avatar_url": "",
              "events_url": "",
              "hooks_url": "",
              "id": 0,
              "issues_url": "",
              "login": "",
              "members_url": "",
              "public_members_url": "",
              "repos_url": "",
              "url": ""
            },
            "description": "Webhook payloads contain the `organization` object when the webhook is configured for an organization or the event occurs from activity in a repository owned by an organization."
          },
          "pull_request": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubPullRequest"
              }
            ],
            "default": {
              "base": {
                "author": {
                  "id": 0,
                  "site_admin": false
                },
                "distinct": false,
                "timestamp": null
              },
              "closed_at": null,
              "head": {
                "author": {
                  "id": 0,
                  "site_admin": false
                },
                "distinct": false,
                "timestamp": null
              },
              "id": 0,
              "merged": false,
              "merged_at": null,
              "number": 0,
              "user": {
                "id": 0,
                "site_admin": false
              }
            },
            "description": "The pull request itself."
          },
          "ref": {
            "description": "`push` event fields. FROM: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads#push\n\nThe full `git ref` that was pushed. Example: `refs/heads/main`.",
            "type": "string"
          },
          "repository": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubRepo"
              }
            ],
            "default": {
              "owner": {
                "id": 0,
                "site_admin": false
              }
            },
            "description": "The `repository` where the event occurred. Webhook payloads contain the `repository` property when the event occurs from activity in a repository."
          },
          "sender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitHubUser"
              }
            ],
            "default": {
              "id": 0,
              "site_admin": false
            },
            "description": "The user that triggered the event. This property is included in every webhook payload."
          }
        },
        "type": "object"
      },
      "Pong": {
        "description": "The response from the `/ping` endpoint.",
        "properties": {
          "message": {
            "description": "The pong response.",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "UserConsentURL": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "webhooks@kittycad.io",
      "url": "https://kittycad.io"
    },
    "description": "Internal webhooks server for listening to several third party webhooks",
    "title": "KittyCAD CIO",
    "version": "0.1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "get": {
        "operationId": "api_get_schema",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Return the OpenAPI schema in JSON format."
      }
    },
    "/auth/discord/callback": {
      "get": {
        "operationId": "listen_auth_discord_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "guild_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to Discord auth."
      }
    },
    "/auth/discord/consent": {
      "get": {
        "operationId": "listen_auth_discord_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for Discord auth."
      }
    },
    "/auth/github/callback": {
      "get": {
        "operationId": "listen_auth_github_callback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to GitHub auth."
      }
    },
    "/auth/github/consent": {
      "get": {
        "operationId": "listen_auth_github_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for GitHub auth."
      }
    },
    "/auth/google/callback": {
      "get": {
        "operationId": "listen_auth_google_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to Google auth."
      }
    },
    "/auth/google/consent": {
      "get": {
        "operationId": "listen_auth_google_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for Google auth."
      }
    },
    "/auth/gusto/callback": {
      "get": {
        "operationId": "listen_auth_gusto_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to Gusto auth."
      }
    },
    "/auth/gusto/consent": {
      "get": {
        "operationId": "listen_auth_gusto_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for Gusto auth."
      }
    },
    "/auth/mailchimp/callback": {
      "get": {
        "operationId": "listen_auth_mailchimp_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to MailChimp auth."
      }
    },
    "/auth/mailchimp/consent": {
      "get": {
        "operationId": "listen_auth_mailchimp_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for MailChimp auth."
      }
    },
    "/auth/quickbooks/callback": {
      "get": {
        "operationId": "listen_auth_quickbooks_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to QuickBooks auth."
      }
    },
    "/auth/quickbooks/consent": {
      "get": {
        "operationId": "listen_auth_quickbooks_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for QuickBooks auth."
      }
    },
    "/auth/ramp/callback": {
      "get": {
        "operationId": "listen_auth_ramp_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to Ramp auth."
      }
    },
    "/auth/ramp/consent": {
      "get": {
        "operationId": "listen_auth_ramp_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for Ramp auth."
      }
    },
    "/auth/slack/callback": {
      "get": {
        "operationId": "listen_auth_slack_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to Slack auth."
      }
    },
    "/auth/slack/consent": {
      "get": {
        "operationId": "listen_auth_slack_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for Slack auth."
      }
    },
    "/auth/zoom/callback": {
      "get": {
        "operationId": "listen_auth_zoom_callback",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "realmId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state that we had passed in through the user consent URL.",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for callbacks to Zoom auth."
      }
    },
    "/auth/zoom/consent": {
      "get": {
        "operationId": "listen_auth_zoom_consent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConsentURL"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get the consent URL for Zoom auth."
      }
    },
    "/auth/zoom/deauthorization": {
      "get": {
        "operationId": "listen_auth_zoom_deauthorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen to deauthorization requests for our Zoom app."
      }
    },
    "/easypost/tracking/update": {
      "post": {
        "operationId": "listen_easypost_tracking_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EasyPostTrackingUpdateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for shipment tracking updated from EasyPost."
      }
    },
    "/functions/{uuid}": {
      "get": {
        "operationId": "listen_get_function_by_uuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Function"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get information about a function by its uuid."
      }
    },
    "/functions/{uuid}/logs": {
      "get": {
        "operationId": "listen_get_function_logs_by_uuid",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get a functions logs by its uuid."
      }
    },
    "/github": {
      "post": {
        "operationId": "listen_github_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitHubWebhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for GitHub webhooks."
      }
    },
    "/github/ratelimit": {
      "get": {
        "operationId": "github_rate_limit",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitHubRateLimit"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Get our current GitHub rate limit."
      }
    },
    "/mailchimp/mailing_list": {
      "get": {
        "operationId": "ping_mailchimp_mailing_list_webhooks",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Ping endpoint for MailChimp mailing list webhooks."
      },
      "post": {
        "operationId": "listen_mailchimp_mailing_list_webhooks",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for MailChimp mailing list webhooks."
      }
    },
    "/ping": {
      "get": {
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Return pong."
      }
    },
    "/run/cleanup": {
      "post": {
        "description": "is shutting down.",
        "operationId": "trigger_cleanup_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "enum": [
                    null
                  ],
                  "title": "Null",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a cleanup of all in-progress sagas, we typically run this when the server"
      }
    },
    "/run/sync-configs": {
      "post": {
        "operationId": "trigger_sync_configs_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync configs."
      }
    },
    "/run/sync-finance": {
      "post": {
        "operationId": "trigger_sync_finance_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync finance."
      }
    },
    "/run/sync-functions": {
      "post": {
        "operationId": "trigger_sync_functions_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync functions."
      }
    },
    "/run/sync-mailing-lists": {
      "post": {
        "operationId": "trigger_sync_mailing_lists_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync mailing lists."
      }
    },
    "/run/sync-other": {
      "post": {
        "operationId": "trigger_sync_other_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync other."
      }
    },
    "/run/sync-recorded-meetings": {
      "post": {
        "operationId": "trigger_sync_recorded_meetings_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync recorded meetings."
      }
    },
    "/run/sync-repos": {
      "post": {
        "operationId": "trigger_sync_repos_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync repos."
      }
    },
    "/run/sync-shipments": {
      "post": {
        "operationId": "trigger_sync_shipments_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync shipments."
      }
    },
    "/run/sync-shorturls": {
      "post": {
        "operationId": "trigger_sync_shorturls_create",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "title": "Uuid",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for triggering a function run of sync shorturls."
      }
    },
    "/shipbob": {
      "post": {
        "operationId": "listen_shipbob_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for shipbob webhooks."
      }
    },
    "/shippo/tracking/update": {
      "post": {
        "operationId": "listen_shippo_tracking_update_webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successfully enqueued operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for shipment tracking updated from Shippo."
      }
    },
    "/slack/commands": {
      "post": {
        "operationId": "listen_slack_commands_webhooks",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for Slack commands webhooks."
      }
    },
    "/slack/interactive": {
      "post": {
        "operationId": "listen_slack_interactive_webhooks",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            },
            "description": "successful operation"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Listen for Slack interactive webhooks."
      }
    }
  }
}